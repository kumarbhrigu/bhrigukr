---
title: "lmeipwFlexdashboard"
author: "Mr. Bhrigu Kr. Rajbongshi"
date: "`r Sys.Date()`"
output: html_document
runtime: shiny
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(flexdashboard)
library(shiny)
library(jmBIG)
library(survival)
library(dplyr)
```

This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.

To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).

## Inputs and Outputs

You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change. This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.

```{r eruptions, echo=FALSE}
inputPanel(
  selectInput("n_breaks", label = "Number of bins:",
              choices = c(10, 20, 35, 50), selected = 20),
  
  sliderInput("bw_adjust", label = "Bandwidth adjustment:",
              min = 0.2, max = 2, value = 1, step = 0.2)
)

renderPlot({
  hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
       xlab = "Duration (minutes)", main = "Geyser eruption duration")
  
  dens <- density(faithful$eruptions, adjust = input$bw_adjust)
  lines(dens, col = "blue")
})
```

## Embedded Application

It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:

```{r tabsets, echo=FALSE}
shinyAppDir(
  system.file("examples/06_tabsets", package = "shiny"),
  options = list(
    width = "100%", height = 550
  )
)
```

Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.

You can also use the `shinyApp` function to define an application inline rather then in an external directory.

In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.


## Page 2

```{r, echo=FALSE}
shinyApp(
  ui_page2 <- fluidPage(
    
    titlePanel("jmbayesBig"),
    
    sidebarLayout(
      sidebarPanel(
        radioButtons("data_option_page2", "Select data source:",
                     c("Upload your own dataset" = "upload",
                       "Use default dataset" = "default")),
        conditionalPanel(
          condition = "input.data_option_page2== 'default'",
          sliderInput("pid_page2", "Patient ID", min = min(surv2$id), max = max(surv2$id), value = 50)
        ),
        conditionalPanel(
          condition = "input.data_option_page2 == 'upload'",
          fileInput("lfile_page2", "Upload Longitudinal Data (CSV format)"),
          fileInput("sfile_page2", "Upload Survival Data (CSV format)"), 
          uiOutput("pid_slider_upload_page2")
        ),
        selectInput("idvar_page2", "ID variable", choices =NULL),
        selectInput("timevar_page2", "Time variable", choices = NULL),
        textInput("longmodel_page2", "Longitudinal data model", value = "y~1+x7"),
        textInput("rdmodel_page2", "Longitudinal data model random effect part", value = "~visit|id"),
        textInput("survmodel_page2", "Survival data model", value = "Surv(time,status)~1+x1"),
        numericInput("nchain_page2", "Number of chain", value = 1),
        numericInput("samplesize_page2", "Sample size", value = 200),
        actionButton("submit_page2", "Submit")
      ),
      mainPanel(
        p('jmbayesBig(): a function for joint model in BIG DATA using JMbayes2 package. For more information about the arguments of the function please look ',a("here.",
                                                                                                                                                           href = "https://cran.r-project.org/web/packages/jmBIG/index.html")),
        textOutput('selected_var_page2'),
        textOutput('sample_size_page2'),
        verbatimTextOutput('summarylmemodel_page2'),
        p('Prediction of survival probability and longitudinal marker learned from model fitted using jmbayesBig() for the selected patient ID: '),
        plotOutput('postTajectory'),
        plotOutput('postSurvival')
        #tabPanel(Title='summary',verbatimTextOutput('summarylmemodel_page2')),
        #tabPanel(Title="Plot",plotOutput('summarylmemodel_page21',width='50%'))
        
        
      )
    )
    
  ),
  server_page2 <- function(input, output, session) {
    
    
    
    
    defaultsurvdata_page2 <- reactive({
      if (input$data_option_page2 == 'upload') {
        req(input$sfile_page2)
        defaultsurvdata_page2 <- read.csv(input$sfile_page2$datapath)
      } else {
        defaultsurvdata_page2 <- surv2
      }
      return(defaultsurvdata_page2)
    })
    observeEvent(defaultsurvdata_page2(), {
      updateSelectInput(session, "idvar_page2", choices = names(defaultsurvdata_page2()))
      updateSelectInput(session, "timevar_page2", choices = names(defaultsurvdata_page2()))
    })
    
    
    
    defaultlongdata_page2 <- reactive({
      if (input$data_option_page2 == 'upload') {
        req(input$lfile_page2)
        defaultlongdata_page2 <- read.csv(input$lfile_page2$datapath)
      } else {
        defaultlongdata_page2 <- long2
      }
      return(defaultlongdata_page2)
    })
    
    # Render PID slider for uploaded data
    output$pid_slider_upload_page2 <- renderUI({
      req(input$idvar_page2)
      tagList(
        selectInput("pid_page22", "Patient ID", choices=defaultsurvdata_page2()[[input$idvar_page2]],selectize = FALSE,size=5)
      )
    })
    
    output$selected_var_page2 <- reactive({
      
      if (input$data_option_page2 == "default") {
        req(input$pid_page2)
        paste("You have selected patient ID", input$pid_page2)
      } else {
        req(input$pid_page22)
        paste("Uploaded data selected with patient ID",input$pid_page22)
      }
    })
    
    output$sample_size_page2 <- renderText({
      paste("You have selected sample size", input$samplesize_page2)
    })
    
    rv<-reactiveValues(model_page2=NULL)
    
    observeEvent(input$submit_page2,{
      # Load default data
      output$summarylmemodel_page2 <- renderPrint({
        req(input$samplesize_page2)
        req(input$nchain_page2)
        req(input$timevar_page2)
        req(input$idvar_page2)
        
        rdmodel2<-as.formula(input$rdmodel_page2)
        longmodel2<-as.formula(input$longmodel_page2)
        survmodel2<-as.formula(input$survmodel_page2)
        
        fitmodel_page22 <- jmbayesBig(dtlong = defaultlongdata_page2(), dtsurv = defaultsurvdata_page2(),
                                     longm =longmodel2, survm = survmodel2, rd = rdmodel2,
                                     timeVar = input$timevar_page2, nchain = input$nchain_page2,
                                     samplesize = input$samplesize_page2,
                                     id = input$idvar_page2)
        rv$model_page2<-fitmodel_page22
        fitmodel_page22$pseudoMod
        # list(head(defaultlongdata_page2()),head(defaultsurvdata_page2()),
        #      longmodel2,survmodel2,rdmodel2,input$timevar_page2,input$nchain_page2,
        #      input$samplesize_page2,input$idvar_page2)
        
      })
      
    })
    
    observeEvent(input$submit_page2,{
      # Load default data
      output$postTajectory<- renderPlot({
        
        if(input$data_option_page2 == "default"){
        req(input$samplesize_page2)
        req(input$nchain_page2)
        req(input$timevar_page2)
        req(input$idvar_page2)
        req(input$pid_page2)

        idvar_page22<-input$idvar_page2
        pid_page22<-input$pid_page2
        ydt<-defaultlongdata_page2()[defaultlongdata_page2()[idvar_page22]==pid_page22,]
        cdt<-defaultsurvdata_page2()[defaultsurvdata_page2()[idvar_page22]==pid_page22,]
        #list(head(defaultsurvdata_page2()),cdt,pid_page22)
        #newdata<-full_join(ydt,cdt,by=idvar_page22)
        #head(newdata)
        #P2_long<-predJMbayes(model=rv$model_page2,ids=pid_page22,newdata=newdata,process = 'longitudinal')
        #head(P2_long$p1[[1]])
        newdata<-ydt[ydt[input$idvar_page2]==pid_page22,]
        P2_long<-predJMbayes(model=rv$model_page2,ids=pid_page22,newdata=newdata,process = 'longitudinal')
        #head(P2_long$p1[[1]]) 
        plot(P2_long$p1[[1]])
        }else{
          req(input$samplesize_page2)
          req(input$nchain_page2)
          req(input$timevar_page2)
          req(input$idvar_page2)
          req(input$pid_page22)
          
          idvar_page22<-input$idvar_page2
          pid_page221<-input$pid_page22
          ydt<-defaultlongdata_page2()[defaultlongdata_page2()[idvar_page22]==pid_page221,]
          cdt<-defaultsurvdata_page2()[defaultsurvdata_page2()[idvar_page22]==pid_page221,]
          #list(head(defaultsurvdata_page2()),cdt,pid_page221)
          #newdata<-full_join(ydt,cdt,by=idvar_page22)
          #head(newdata)
          newdata<-ydt[ydt[input$idvar_page2]==pid_page221,]
          P2_long<-predJMbayes(model=rv$model_page2,ids=pid_page221,newdata=newdata,process = 'longitudinal')
          #head(P2_long$p1[[1]]) 
          plot(P2_long$p1[[1]])
        }
        
        })

    })

    observeEvent(input$submit_page2,{
      # Load default data
      output$postSurvival<- renderPlot({
        
        if(input$data_option_page2 == "default"){
        req(input$samplesize_page2)
        req(input$nchain_page2)
        req(input$timevar_page2)
        req(input$idvar_page2)
        req(input$pid_page2)

        idvar_page22<-input$idvar_page2
        pid_page22<-input$pid_page2
        ydt<-defaultlongdata_page2()[defaultlongdata_page2()[idvar_page22]==pid_page22,]
        cdt<-defaultsurvdata_page2()[defaultsurvdata_page2()[idvar_page22]==pid_page22,idvar_page22]
        #list(dim(ydt),dim(cdt))
        #newdata<-full_join(ydt,cdt,by=idvar_page22)
        newdata<-ydt[ydt[input$idvar_page2]==pid_page22,]
        #newdata
        P2_event<-predJMbayes(model=rv$model_page2,ids=pid_page22,newdata=newdata,process = 'event')
        #P2_long<-predJMbayes(model=rv$model_page2,ids=pid_page22,newdata=newdata,process = 'longitudinal')
        plot(P2_event$p1[[1]])
        #plot(P2_long$p1[[1]])
        }else{
          req(input$samplesize_page2)
          req(input$nchain_page2)
          req(input$timevar_page2)
          req(input$idvar_page2)
          req(input$pid_page22)
          
          idvar_page22<-input$idvar_page2
          pid_page221<-input$pid_page2
          ydt<-defaultlongdata_page2()[defaultlongdata_page2()[idvar_page22]==pid_page221,]
          cdt<-defaultsurvdata_page2()[defaultsurvdata_page2()[idvar_page22]==pid_page221,]
          #list(dim(ydt),dim(cdt))
          #newdata<-ydt
          newdata<-ydt[ydt[input$idvar_page2]==pid_page221,]
          #newdata
          P2_event<-predJMbayes(model=rv$model_page2,ids=pid_page221,newdata=newdata,process = 'event')
          #P2_long<-predJMbayes(model=rv$model_page2,ids=pid_page22,newdata=newdata,process = 'longitudinal')
          #plot(P2_event$p1[[1]])
          plot(P2_event$p1[[1]])
        }
      })
    })
  },
 options = list(
    width = "100%", height = 550
  )
  
)


```
